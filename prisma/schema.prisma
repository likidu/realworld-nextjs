// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling
  // Emulates relations in Prisma Client
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#how-to-set-the-relation-mode-in-your-prisma-schema
  relationMode = "prisma"
}

model User {
  email      String    @unique /// User email for registering and login use.
  username   String    @id /// User internal id.
  password   String /// User password stored in the database.
  bio        String? /// User biographical information.
  image      String? /// Link to the user avatar.
  follows    User[]    @relation("UserFollows") /// List of other users that this one follows.
  followedBy User[]    @relation("UserFollows") /// List of other users that follows this one.
  authored   Post[]    @relation("Author") /// List of posts this user has written.
  favorites  Post[]    @relation("Favorites") /// List of posts this user has favorited.
  comment    Comment[] @relation("Author") /// List of comments this user has written.
}

model Post {
  title          String    @unique
  slug           String    @id /// Slug is an uri safe string derived from the title.
  description    String /// Description for SEO of this post.
  body           String    @db.Text /// The main content of the post.
  tagList        Tag[] /// List of tags associated with this post.
  author         User      @relation("Author", fields: [authorUsername], references: [username], onDelete: Cascade) /// User that is the author of this post.
  authorUsername String /// Username of the author of this post.
  favoritedBy    User[]    @relation("Favorites") /// List of users that have favorited this post.
  comments       Comment[] @relation("Comments") /// List of comments of this post.
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  @@index([authorUsername])
}

model Comment {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  body           String /// The main content of the comment.
  author         User     @relation("Author", fields: [authorUsername], references: [username], onDelete: Cascade) /// User that is the author of this comment.
  authorUsername String /// Username of the author of this comment.
  Post           Post     @relation("Comments", fields: [postSlug], references: [slug], onDelete: Cascade) /// Post that this comment belongs to.
  postSlug       String /// Post slug that this comment belongs to.

  @@index([authorUsername])
  @@index([postSlug])
}

model Tag {
  tagName String @id
  post    Post[] /// List of posts that have this tag.
}
